// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SongsClient is the client API for Songs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongsClient interface {
	CreateOrUpdateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error)
	ListSongs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Songs_ListSongsClient, error)
}

type songsClient struct {
	cc grpc.ClientConnInterface
}

func NewSongsClient(cc grpc.ClientConnInterface) SongsClient {
	return &songsClient{cc}
}

func (c *songsClient) CreateOrUpdateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, "/api.Songs/CreateOrUpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsClient) ListSongs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Songs_ListSongsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Songs_ServiceDesc.Streams[0], "/api.Songs/ListSongs", opts...)
	if err != nil {
		return nil, err
	}
	x := &songsListSongsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Songs_ListSongsClient interface {
	Recv() (*Song, error)
	grpc.ClientStream
}

type songsListSongsClient struct {
	grpc.ClientStream
}

func (x *songsListSongsClient) Recv() (*Song, error) {
	m := new(Song)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SongsServer is the server API for Songs service.
// All implementations must embed UnimplementedSongsServer
// for forward compatibility
type SongsServer interface {
	CreateOrUpdateSong(context.Context, *Song) (*Song, error)
	ListSongs(*Empty, Songs_ListSongsServer) error
	mustEmbedUnimplementedSongsServer()
}

// UnimplementedSongsServer must be embedded to have forward compatible implementations.
type UnimplementedSongsServer struct {
}

func (UnimplementedSongsServer) CreateOrUpdateSong(context.Context, *Song) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateSong not implemented")
}
func (UnimplementedSongsServer) ListSongs(*Empty, Songs_ListSongsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSongs not implemented")
}
func (UnimplementedSongsServer) mustEmbedUnimplementedSongsServer() {}

// UnsafeSongsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongsServer will
// result in compilation errors.
type UnsafeSongsServer interface {
	mustEmbedUnimplementedSongsServer()
}

func RegisterSongsServer(s grpc.ServiceRegistrar, srv SongsServer) {
	s.RegisterService(&Songs_ServiceDesc, srv)
}

func _Songs_CreateOrUpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Song)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServer).CreateOrUpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Songs/CreateOrUpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServer).CreateOrUpdateSong(ctx, req.(*Song))
	}
	return interceptor(ctx, in, info, handler)
}

func _Songs_ListSongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongsServer).ListSongs(m, &songsListSongsServer{stream})
}

type Songs_ListSongsServer interface {
	Send(*Song) error
	grpc.ServerStream
}

type songsListSongsServer struct {
	grpc.ServerStream
}

func (x *songsListSongsServer) Send(m *Song) error {
	return x.ServerStream.SendMsg(m)
}

// Songs_ServiceDesc is the grpc.ServiceDesc for Songs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Songs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Songs",
	HandlerType: (*SongsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateSong",
			Handler:    _Songs_CreateOrUpdateSong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSongs",
			Handler:       _Songs_ListSongs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
